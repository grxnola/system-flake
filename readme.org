#+title: NixOS ZFS
#+author: Dakota Harris
#+date: <2022-02-28 Mon>
#+auto_tangle: t

* Introduction
** What is this?
This Org will build the installation script and configuration file(s) for installing NixOS with ZFS on the local machine.
It also writes my doom emacs configuration to ~/.doom.d/.
- ~bash~ to set up the script environment
- ~nix~ and ~nix flake~

** Usage
i.e. ~nixos-rebuild --flake configuration/ test~

* System Configuration (flake.nix)
** flake.nix
This just setups up some structure we tangle later.
#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Grxnola's NixOS configuration.";
  <<inputs>>
  <<outputs>>
}
#+end_src

** Inputs
These are the inputs to the Flake. We use: nixpkgs, and unstable, for packages - the first build also sets up Cachix for future builds;
home-manager, which is used to manage my home directory & dotfiles (I do it here because it's a single-user system, let's be real);
and emacs-overlay, because PgtkNativeComp is good for speed and when I eventually migrate to Wayland.
#+name: inputs
#+begin_src nix :noweb yes
# NOTE: This file is tangled from readme.org. Do not edit by hand.
inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-22.05";
    nixpkgs-unstable.url = "github:nixos/nixpkgs/nixpkgs-unstable";

    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";
  };
#+end_src

** Outputs
This is the flake output - a NixOS configuration with a home set up for dch.
#+name: outputs
#+begin_src nix :noweb yes
outputs = { self, nixpkgs, home-manager, ... }: {
  nixosConfigurations.cognac = nixpkgs.lib.nixosSystem {
    system = "x86_64-linux";
    modules = [
      home-manager.nixosModules.home-manager { }
      <<configuration-cognac>>
    ];
  };
};
#+end_src

** Cognac (Desktop)
Cognac is my desktop machine, it's my daily driver. Love you baby <3
#+name: configuration-cognac
#+begin_src nix :noweb yes
({ config, pkgs, lib, modulesPath, ... }: {
  <<cognac-hardware>>
  <<cognac-network>>
  <<cognac-general>>
  <<user-dch>>
})
#+end_src

*** Boot, filesystems and hardware
Cognac has a ZFS pool called zroot with home and nix on their own snapshottable filesystems. It currently only has one disk.
#+name: cognac-hardware
#+begin_src nix :noweb yes
fileSystems."/" = {
  device = "zroot/root";
  fsType = "zfs";
};

fileSystems."/home" = {
  device = "zroot/root/home";
  fsType = "zfs";
};

fileSystems."/nix" = {
  device = "zroot/root/nix";
  fsType = "zfs";
};

fileSystems."/boot" = {
  device = "/dev/disk/by-uuid/9864-170D";
  fsType = "vfat";
};

swapDevices = [{
  device = "/dev/disk/by-uuid/6dbfd189-bc54-4159-98d8-6bb0cb0e7bdf";
}];

hardware.cpu.amd.updateMicrocode =
  lib.mkDefault config.hardware.enableRedistributableFirmware;

boot.initrd.availableKernelModules =
  [ "ahci" "xhci_pci" "usbhid" "sd_mod" ];
boot.initrd.kernelModules = [ ];
boot.kernelModules = [ "kvm-amd" ];
boot.extraModulePackages = [ ];

boot = {
  supportedFilesystems = [ "zfs" ];
  loader.grub.zfsSupport = true;
  loader.grub.efiSupport = true;
  loader.grub.device = "nodev";
  loader.efi.canTouchEfiVariables = true;
};
#+end_src
**** TODO (IRL) Add more disks
**** TODO Script pool and filesystem creation

*** Networking
Honestly, I don't know much about this stuff.
#+name: cognac-network
#+begin_src nix :noweb yes
networking = {
    hostName = "cognac";
    hostId = "19828237"; # Should be a random number.
    nameservers = [ "1.1.1.1" ];
    useDHCP = false; # For some reason this is deprecated?
    interfaces.enp39s0.useDHCP = true;
    wireless.enable = false;
  };
#+end_src
**** TODO Configure firewall
**** TODO Wireguard VPN (Mullvad)

*** General configuration
This is the "general" system configuration.
#+name: cognac-general
#+begin_src nix :noweb yes
imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

nixpkgs.overlays = [ (import self.inputs.emacs-overlay) ];

services.xserver = {
  enable = true;
  layout = "gb";
  videoDrivers = [ "amdgpu" ];
  displayManager.gdm.enable = true;
  desktopManager.gnome.enable = true;
};

systemd.tmpfiles.rules = [
  "L+ /run/gdm/.config/monitors.xml - - - - ${pkgs.writeText "gdm-monitors.xml" ''
<monitors version="2">
  <configuration>
    <logicalmonitor>
      <x>1080</x>
      <y>278</y>
      <scale>1</scale>
      <primary>yes</primary>
      <monitor>
        <monitorspec>
          <connector>HDMI-1</connector>
          <vendor>AOC</vendor>
          <product>2460G4</product>
          <serial>0x00000b8e</serial>
        </monitorspec>
        <mode>
          <width>1920</width>
          <height>1080</height>
          <rate>119.982177734375</rate>
        </mode>
      </monitor>
    </logicalmonitor>
    <logicalmonitor>
      <x>0</x>
      <y>0</y>
      <scale>1</scale>
      <transform>
        <rotation>left</rotation>
        <flipped>no</flipped>
      </transform>
      <monitor>
        <monitorspec>
          <connector>DP-3</connector>
          <vendor>DEL</vendor>
          <product>DELL U2419H</product>
          <serial>4Y4P123</serial>
        </monitorspec>
        <mode>
          <width>1920</width>
          <height>1080</height>
          <rate>60</rate>
        </mode>
      </monitor>
    </logicalmonitor>
  </configuration>
</monitors>
''}"
];

environment.gnome.excludePackages = with pkgs.gnome; [
  cheese
  gnome-music
  pkgs.gnome-tour
  gnome-terminal
  gnome-maps
  gnome-calendar
  gnome-online-miners
  gnome-contacts
  gnome-calculator
  gnome-weather
  pkgs.gnome-photos
  gnome-clocks
  pkgs.gnome-online-accounts
  simple-scan

  gedit
  epiphany
  geary
  evince
  gnome-characters
  totem
  tali
  iagno
  hitori
  atomix
];

services.openssh = {
  enable = true;
  passwordAuthentication = false;
  permitRootLogin = "prohibit-password";
};

services.ratbagd.enable = true;

sound.enable = true;
hardware.pulseaudio.enable = true;
programs.noisetorch.enable = true;

hardware.opengl.driSupport = true;
hardware.opengl.driSupport32Bit = true;

time.timeZone = "Europe/London";
i18n.defaultLocale = "en_GB.UTF-8";
console = {
  font = "Lat2-Terminus16";
  keyMap = "uk";
};

services = { };

environment.systemPackages = with pkgs; [
  <<cognac-system-packages>>
];

# Some programs need SUID wrappers, can be configured further or are
# started in user sessions.
programs.fish.enable = true;
programs.gnupg.agent = {
  enable = true;
  enableSSHSupport = true;
};

# nix & flakes
nix = {
  package = pkgs.nixFlakes;
  extraOptions = ''
    experimental-features = nix-command flakes
  '';

  settings = {
    substituters = [ "https://nix-community.cachix.org" ];
    trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };
};

# System state
system = {
  configurationRevision = nixpkgs.lib.mkIf (self ? rev) self.rev;
  stateVersion = "22.05";
  autoUpgrade = {
    enable = false;
    allowReboot = false;
  };
};
#+end_src

*** System-level packages
#+name: cognac-system-packages
#+begin_src none
curl inetutils vis wget zfs freetype git
#+end_src


** User configuration (dch)
#+name: user-dch
#+begin_src nix :noweb yes
users.users.dch = {
  shell = pkgs.fish;
  isNormalUser = true;
  home = "/home/dch";
  extraGroups = [ "wheel" "podman" ];
  openssh.authorizedKeys.keys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJjqcbQfCraYffdGObPpVVNHTqOvie4ns5TfqoADP4mx"
  ];
};

home-manager.users.dch = {
  home.stateVersion = "22.05";
  home.packages = with pkgs; [
    <<user-dch-packages>>
    <<user-dch-fonts>>
  ];

  fonts.fontconfig.enable = true;
};
#+end_src

*** dch's fonts
#+name: user-dch-fonts
#+begin_src none
tewi-font
courier-prime
mplus-outline-fonts.githubRelease
#+end_src

*** dch's packages
#+name: user-dch-packages
#+begin_src none
ansible              cachix                     cmake      cmigemo
cryptsetup           emacs-all-the-icons-fonts
entr                       firefox    gh git
glib                 glibc                      gnumake    home-manager     jq
libratbag            libtool                    libvterm   moreutils
mpv                  mullvad                    nixfmt     nq               packer  piper
piper                python3                    ripgrep    shellcheck
slock                srm                        terraform  tor              ttyrec
unzip                usbutils                   vis        wireguard-tools
xz                   cowsay                     fortune
gnome.gnome-tweaks emacsNativeComp
zig racket glslang nodejs-18_x pandoc
#+end_src
